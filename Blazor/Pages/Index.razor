@page "/index"
@using Models
@inject HttpClient httpClient;
@inject NavigationManager NavigationManager
@inject IJSRuntime sweetalert

<h3>Search Data</h3>
<hr />

<div class="form-group row col-md-5 mb-3">
    <label for="latitude" class="col-sm-4 col-form-label">Latitude</label>
    <div class="col-sm-6">
        <input type="text" class="form-control" id="latitude" placeholder="Enter latitude" @bind="weather.latitude">
    </div>

</div>

<div class="form-group row col-md-5 mb-3">
    <label for="longitude" class="col-sm-4 col-form-label">Longitude</label>
    <div class="col-sm-6">
        <input type="text" class="form-control" id="longitude" placeholder="Enter longitude" @bind="weather.longitude">
    </div>
</div>

<br />
<button type="button" class="btn btn-success" @onclick="Search">Search</button>
<br />
<h3 class="mt-4">Display Weather Forecast</h3>
<hr />
<div class="table-responsive">
    <table class="table">
        <tbody>
            <tr>
                <td class="col-sm-2">City</td>
                <td>: @weather.city</td>
            </tr>
            <tr>
                <td class="col-sm-2">Temperature (C)</td>
                <td>: @weather.temperature_C</td>
            </tr>
            <tr>
                <td class="col-sm-2">Humidity</td>
                <td>: @weather.humidity</td>
            </tr>
            <tr>
                <td class="col-sm-2">Condition</td>
                <td>: @weather.condition</td>
            </tr>
            <tr>
                <td class="col-sm-2">Description</td>
                <td>: @weather.condition_Description</td>
            </tr>
        </tbody>
    </table>
</div>


@code {
    private MainWeather weather = new();

    private async Task Search()
    {
        float? latitude = weather.latitude;
        float? longitude = weather.longitude;

        // Use string interpolation to construct the URL with the latitude and longitude values
        string url = $"http://localhost:5023/api/Weather/{longitude}/{latitude}";

        if (latitude == null || longitude == null)
        {

            await sweetalert.InvokeVoidAsync("showAlert", "Warning", "Both Latitude and Longitude must be filled! ", "warning");

        }
        else
        {
            try
            {

                var w = await httpClient.GetFromJsonAsync<WeatherResponse>(url);


                if (w.Success == false)
                {
                    await sweetalert.InvokeVoidAsync("showAlert", "Warning", w.Message, "warning");
                }
                else
                {
                    weather = w.Weather;
                }

            }
            catch (HttpRequestException)
            {
                await sweetalert.InvokeVoidAsync("showAlert", "Error", "An error occurred while fetching weather data.", "error");
            }
        }

    }
}

